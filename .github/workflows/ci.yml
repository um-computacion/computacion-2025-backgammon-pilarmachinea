name: CI with Coverage and SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate coverage report
        run: |
          coverage run -m unittest discover
          coverage xml -o cobertura.xml
          coverage report -m > coverage_report.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=
            -Dsonar.organization=
            -Dsonar.python.coverage.reportPaths=cobertura.xml
            -Dsonar.sources=.

      - name: Run Pylint and generate report
        run: |
          pylint --rcfile=.pylintrc main.py test.py > pylint_report.txt || true

      - name: Generate reports file
        run: |
          cat << 'EOF' > generate_reports.py
          import os

          # Function to read file content
          def read_file(filepath):
              if not os.path.exists(filepath):
                  return f"Error: Report file not found at {filepath}"
              with open(filepath, "r") as f:
                  return f.read()

          # Read reports
          coverage_report = read_file("coverage_report.txt")
          pylint_report = read_file("pylint_report.txt")

          # Create the content for REPORTS.md
          reports_content = f"""# Automated Reports

          ## Coverage Report
          ```text
          {coverage_report}
          ```

          ## Pylint Report
          ```text
          {pylint_report}
          ```
          """

          # Write to REPORTS.md
          with open("REPORTS.md", "w") as f:
              f.write(reports_content)
          EOF
          python generate_reports.py

      - name: Commit and push reports file
        if: github.ref == 'refs/heads/main'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add REPORTS.md
          if git diff --staged --quiet; then
            echo "No changes to commit to REPORTS.md"
          else
            git commit -m "docs: Update automated reports [skip ci]"
            git push
          fi